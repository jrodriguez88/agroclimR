cat("*  Column    Daily Value
*     1      Station number
*     2      Year
*     3      Day
*     4      irradiance         KJ m-2 d-1
*     5      min temperature            oC
*     6      max temperature            oC
*     7      vapor pressure            kPa
*     8      mean wind speed         m s-1
*     9      precipitation          mm d-1
*-----------------------------------------------------------", sep = '\n')
}
# Data base
data_to <- tidy_wth_oryza(wth_data) %>%
mutate(stn = stn,
year = year(date),
day = yday(date),
srad = if_else(is.na(srad), median(.$srad, na.rm = T), round(srad*1000, 2)),
tmax = if_else(is.na(tmax), -99, round(tmax, 2)),
tmin = if_else(is.na(tmin), -99, round(tmin, 2)),
rain = if_else(is.na(rain), -99, round(rain, 2)),
vp  = if_else(is.na(vp), -99, round(vp, 2)),
wspd = if_else(is.na(wspd), -99, round(wspd, 2))) %>%
dplyr::select(stn, year, day, srad, tmin, tmax, vp, wspd, rain)
#    dir.create(paste0(path,"/WTH"), showWarnings = FALSE)
set_head <- paste(lon, lat, elev, 0, 0, sep = ",")
if(isTRUE(multiyear)){
#DATA=read.table(file, head=T)
fname <- paste0(path, "/" , id_name, stn, ".cli")
sink(file = fname, append = F)
if(isTRUE(tag)) print_tag()
cat(set_head)
cat("\n")
write.table(data_to , sep= ",", row.names = F, col.names = F)
sink()
} else {
data_list <- split(data_to, data_to$year)
walk(data_list, function(x){
fname <- paste(path,"/", id_name, stn,".", str_sub(unique(x$year), 2), sep = "")
sink(file=fname)
if(isTRUE(tag)) print_tag()
cat(set_head)
cat("\n")
write.table(x ,sep=",",row.names=F,col.names=F)
sink()})
}
}
write_wth_oryza(path = "C:/", id_name = "TEST", wth_data = weather, lat = 3.8, lon = -76.5, elev = 650)
write_wth_oryza(path = "\", id_name = "TEST", wth_data = weather, lat = 3.8, lon = -76.5, elev = 650)
write_wth_oryza(path = "D:\", id_name = "TEST", wth_data = weather, lat = 3.8, lon = -76.5, elev = 650)
write_wth_oryza(path = "D:/", id_name = "TEST", wth_data = weather, lat = 3.8, lon = -76.5, elev = 650)
write_wth_oryza(path = "/", id_name = "TEST", wth_data = weather, lat = 3.8, lon = -76.5, elev = 650)
write_wth_oryza(path = "", id_name = "TEST", wth_data = weather, lat = 3.8, lon = -76.5, elev = 650)
write_wth_oryza(path = ".", id_name = "TEST", wth_data = weather, lat = 3.8, lon = -76.5, elev = 650)
## Update the details for the return value
#' @return
#' \itemize{
#'  \item
#' }
#'
#' @export
#'
#' #lat <- 3.8285
#lon <- -76.5215
write_wth_oryza <- function(path, id_name, wth_data, lat, lon, elev, stn=1, multiyear = F, tag = F) {
# Tidy weather data
tidy_wth_oryza <- function(wth_data){
var_names <- colnames(wth_data) %>% tolower()
wth_data <- setNames(wth_data, var_names)
stopifnot(require(sirad))
stopifnot(class(wth_data$date)=="Date" & all(c("tmax", "tmin", "rain", "srad") %in%  var_names))
if("vp" %in% var_names){
message("Early morning vapor pressure (VP; kPa) in data")
} else if("rhum" %in% var_names)
{
wth_data <- mutate(wth_data,
es = sirad::es(tmax, tmin),         #Determination of mean saturation vapour pressure http://www.fao.org/3/x0490e/x0490e07.htm  - eq.12
vp = es*rhum/100) %>% select(-es)   #Determination of actual vapour pressure vpd http://www.fao.org/3/x0490e/x0490e07.htm  - eq.19
message("Early morning vapor pressure (VP; kPa) derived from relative humidity data")
} else {
wth_data <- mutate(wth_data, vp = NA_real_)
message("Vapor Pressure is not Available - VP Set as NA: -99")
}
if (!"wspd" %in% var_names) {
wth_data <- mutate(wth_data, wspd = NA_real_)
message("Wind Speed is not Available - Set as NA: -99")
}
return(wth_data)
}
print_tag <- function(){
cat("*-----------------------------------------------------------", sep = '\n')
cat(paste0("*  Station Name: ", id_name), sep = '\n')
cat(paste0("*  ORYZA Weather file - by https://github.com/jrodriguez88"), sep = '\n')
cat(paste0("*  Longitude: ", lon, " -- Latitude: ", lat, " -- Elevation: ", elev, "m"), sep = '\n')
cat("*-----------------------------------------------------------", sep = '\n')
cat(paste0("*  Date: ", min(wth_data$date), " : ", max(wth_data$date)), sep = '\n')
cat("*", sep = '\n')
cat("*  Column    Daily Value
*     1      Station number
*     2      Year
*     3      Day
*     4      irradiance         KJ m-2 d-1
*     5      min temperature            oC
*     6      max temperature            oC
*     7      vapor pressure            kPa
*     8      mean wind speed         m s-1
*     9      precipitation          mm d-1
*-----------------------------------------------------------", sep = '\n')
}
# Data base
data_to <- tidy_wth_oryza(wth_data) %>%
mutate(stn = stn,
year = year(date),
day = yday(date),
srad = if_else(is.na(srad), median(.$srad, na.rm = T), round(srad*1000, 2)),
tmax = if_else(is.na(tmax), -99, round(tmax, 2)),
tmin = if_else(is.na(tmin), -99, round(tmin, 2)),
rain = if_else(is.na(rain), -99, round(rain, 2)),
vp  = if_else(is.na(vp), -99, round(vp, 2)),
wspd = if_else(is.na(wspd), -99, round(wspd, 2))) %>%
dplyr::select(stn, year, day, srad, tmin, tmax, vp, wspd, rain)
#    dir.create(paste0(path,"/WTH"), showWarnings = FALSE)
set_head <- paste(lon, lat, elev, 0, 0, sep = ",")
if(isTRUE(multiyear)){
#DATA=read.table(file, head=T)
fname <- paste0(path, "/" , id_name, stn, ".cli")
sink(file = fname, append = F)
if(isTRUE(tag)) print_tag()
cat(set_head)
cat("\n")
write.table(data_to , sep= ",", row.names = F, col.names = F)
sink()
} else {
data_list <- split(data_to, data_to$year)
walk(data_list, function(x){
fname <- paste(path,"/", id_name, stn,".", str_sub(unique(x$year), 2), sep = "")
sink(file=fname)
if(isTRUE(tag)) print_tag()
cat(set_head)
cat("\n")
write.table(x ,sep=",",row.names=F,col.names=F)
sink()})
}
return(list(fname))
}
write_wth_oryza(path = "/", id_name = "TEST", wth_data = weather, lat = 3.8, lon = -76.5, elev = 650)
write_wth_oryza(path = ".", id_name = "TEST", wth_data = weather, lat = 3.8, lon = -76.5, elev = 650)
list.files(path, "id_name")
path
path = "."
path
list.files(path, "id_name")
path
write_wth_oryza(path = ".", id_name = "TEST", wth_data = weather, lat = 3.8, lon = -76.5, elev = 650)
## Update the details for the return value
#' @return
#' \itemize{
#'  \item
#' }
#'
#' @export
#'
#' #lat <- 3.8285
#lon <- -76.5215
write_wth_oryza <- function(path = ".", id_name, wth_data, lat, lon, elev, stn=1, multiyear = F, tag = F) {
# Tidy weather data
tidy_wth_oryza <- function(wth_data){
var_names <- colnames(wth_data) %>% tolower()
wth_data <- setNames(wth_data, var_names)
stopifnot(require(sirad))
stopifnot(class(wth_data$date)=="Date" & all(c("tmax", "tmin", "rain", "srad") %in%  var_names))
if("vp" %in% var_names){
message("Early morning vapor pressure (VP; kPa) in data")
} else if("rhum" %in% var_names)
{
wth_data <- mutate(wth_data,
es = sirad::es(tmax, tmin),         #Determination of mean saturation vapour pressure http://www.fao.org/3/x0490e/x0490e07.htm  - eq.12
vp = es*rhum/100) %>% select(-es)   #Determination of actual vapour pressure vpd http://www.fao.org/3/x0490e/x0490e07.htm  - eq.19
message("Early morning vapor pressure (VP; kPa) derived from relative humidity data")
} else {
wth_data <- mutate(wth_data, vp = NA_real_)
message("Vapor Pressure is not Available - VP Set as NA: -99")
}
if (!"wspd" %in% var_names) {
wth_data <- mutate(wth_data, wspd = NA_real_)
message("Wind Speed is not Available - Set as NA: -99")
}
return(wth_data)
}
print_tag <- function(){
cat("*-----------------------------------------------------------", sep = '\n')
cat(paste0("*  Station Name: ", id_name), sep = '\n')
cat(paste0("*  ORYZA Weather file - by https://github.com/jrodriguez88"), sep = '\n')
cat(paste0("*  Longitude: ", lon, " -- Latitude: ", lat, " -- Elevation: ", elev, "m"), sep = '\n')
cat("*-----------------------------------------------------------", sep = '\n')
cat(paste0("*  Date: ", min(wth_data$date), " : ", max(wth_data$date)), sep = '\n')
cat("*", sep = '\n')
cat("*  Column    Daily Value
*     1      Station number
*     2      Year
*     3      Day
*     4      irradiance         KJ m-2 d-1
*     5      min temperature            oC
*     6      max temperature            oC
*     7      vapor pressure            kPa
*     8      mean wind speed         m s-1
*     9      precipitation          mm d-1
*-----------------------------------------------------------", sep = '\n')
}
# Data base
data_to <- tidy_wth_oryza(wth_data) %>%
mutate(stn = stn,
year = year(date),
day = yday(date),
srad = if_else(is.na(srad), median(.$srad, na.rm = T), round(srad*1000, 2)),
tmax = if_else(is.na(tmax), -99, round(tmax, 2)),
tmin = if_else(is.na(tmin), -99, round(tmin, 2)),
rain = if_else(is.na(rain), -99, round(rain, 2)),
vp  = if_else(is.na(vp), -99, round(vp, 2)),
wspd = if_else(is.na(wspd), -99, round(wspd, 2))) %>%
dplyr::select(stn, year, day, srad, tmin, tmax, vp, wspd, rain)
#    dir.create(paste0(path,"/WTH"), showWarnings = FALSE)
set_head <- paste(lon, lat, elev, 0, 0, sep = ",")
if(isTRUE(multiyear)){
#DATA=read.table(file, head=T)
fname <- paste0(path, "/" , id_name, stn, ".cli")
sink(file = fname, append = F)
if(isTRUE(tag)) print_tag()
cat(set_head)
cat("\n")
write.table(data_to , sep= ",", row.names = F, col.names = F)
sink()
} else {
data_list <- split(data_to, data_to$year)
walk(data_list, function(x){
fname <- paste(path,"/", id_name, stn,".", str_sub(unique(x$year), 2), sep = "")
sink(file=fname)
if(isTRUE(tag)) print_tag()
cat(set_head)
cat("\n")
write.table(x ,sep=",",row.names=F,col.names=F)
sink()})
}
#any(list.files(path, "id_name"))
}
write_wth_oryza(path = ".", id_name = "TEST", wth_data = weather, lat = 3.8, lon = -76.5, elev = 650)
list.files(path, "id_name")
path
id_name
id_name = "TEST"
list.files(path, id_name)
any(list.files(path, id_name))
str_detect(list.files(path, id_name), id_name)
any(str_detect(list.files(path, id_name), id_name) == T)
## Update the details for the return value
#' @return
#' \itemize{
#'  \item
#' }
#'
#' @export
#'
#' #lat <- 3.8285
#lon <- -76.5215
write_wth_oryza <- function(path = ".", id_name, wth_data, lat, lon, elev, stn=1, multiyear = F, tag = F) {
# Tidy weather data
tidy_wth_oryza <- function(wth_data){
var_names <- colnames(wth_data) %>% tolower()
wth_data <- setNames(wth_data, var_names)
stopifnot(require(sirad))
stopifnot(class(wth_data$date)=="Date" & all(c("tmax", "tmin", "rain", "srad") %in%  var_names))
if("vp" %in% var_names){
message("Early morning vapor pressure (VP; kPa) in data")
} else if("rhum" %in% var_names)
{
wth_data <- mutate(wth_data,
es = sirad::es(tmax, tmin),         #Determination of mean saturation vapour pressure http://www.fao.org/3/x0490e/x0490e07.htm  - eq.12
vp = es*rhum/100) %>% select(-es)   #Determination of actual vapour pressure vpd http://www.fao.org/3/x0490e/x0490e07.htm  - eq.19
message("Early morning vapor pressure (VP; kPa) derived from relative humidity data")
} else {
wth_data <- mutate(wth_data, vp = NA_real_)
message("Vapor Pressure is not Available - VP Set as NA: -99")
}
if (!"wspd" %in% var_names) {
wth_data <- mutate(wth_data, wspd = NA_real_)
message("Wind Speed is not Available - Set as NA: -99")
}
return(wth_data)
}
print_tag <- function(){
cat("*-----------------------------------------------------------", sep = '\n')
cat(paste0("*  Station Name: ", id_name), sep = '\n')
cat(paste0("*  ORYZA Weather file - by https://github.com/jrodriguez88"), sep = '\n')
cat(paste0("*  Longitude: ", lon, " -- Latitude: ", lat, " -- Elevation: ", elev, "m"), sep = '\n')
cat("*-----------------------------------------------------------", sep = '\n')
cat(paste0("*  Date: ", min(wth_data$date), " : ", max(wth_data$date)), sep = '\n')
cat("*", sep = '\n')
cat("*  Column    Daily Value
*     1      Station number
*     2      Year
*     3      Day
*     4      irradiance         KJ m-2 d-1
*     5      min temperature            oC
*     6      max temperature            oC
*     7      vapor pressure            kPa
*     8      mean wind speed         m s-1
*     9      precipitation          mm d-1
*-----------------------------------------------------------", sep = '\n')
}
# Data base
data_to <- tidy_wth_oryza(wth_data) %>%
mutate(stn = stn,
year = year(date),
day = yday(date),
srad = if_else(is.na(srad), median(.$srad, na.rm = T), round(srad*1000, 2)),
tmax = if_else(is.na(tmax), -99, round(tmax, 2)),
tmin = if_else(is.na(tmin), -99, round(tmin, 2)),
rain = if_else(is.na(rain), -99, round(rain, 2)),
vp  = if_else(is.na(vp), -99, round(vp, 2)),
wspd = if_else(is.na(wspd), -99, round(wspd, 2))) %>%
dplyr::select(stn, year, day, srad, tmin, tmax, vp, wspd, rain)
#    dir.create(paste0(path,"/WTH"), showWarnings = FALSE)
set_head <- paste(lon, lat, elev, 0, 0, sep = ",")
if(isTRUE(multiyear)){
#DATA=read.table(file, head=T)
fname <- paste0(path, "/" , id_name, stn, ".cli")
sink(file = fname, append = F)
if(isTRUE(tag)) print_tag()
cat(set_head)
cat("\n")
write.table(data_to , sep= ",", row.names = F, col.names = F)
sink()
} else {
data_list <- split(data_to, data_to$year)
walk(data_list, function(x){
fname <- paste(path,"/", id_name, stn,".", str_sub(unique(x$year), 2), sep = "")
sink(file=fname)
if(isTRUE(tag)) print_tag()
cat(set_head)
cat("\n")
write.table(x ,sep=",",row.names=F,col.names=F)
sink()})
}
return(any(str_detect(list.files(path, id_name), id_name) == T))
}
write_wth_oryza(path = ".", id_name = "TEST", wth_data = weather, lat = 3.8, lon = -76.5, elev = 650)
write_wth_oryza(path = ".", id_name = "TEST2", wth_data = weather, lat = 3.8, lon = -76.5, elev = 650, multiyear = T, tag = T)
write_wth_oryza(path = ".", id_name = "TEST2", wth_data = weather, lat = 3.8, lon = -76.5, elev = 650, multiyear = T, tag = T)
wth_data$date
min(wth_data$date)
setNames(wth_data, tolower(colnames(wth_data)))
## Update the details for the return value
#' @return
#' \itemize{
#'  \item
#' }
#'
#' @export
#'
#' #lat <- 3.8285
#lon <- -76.5215
write_wth_oryza <- function(path = ".", id_name, wth_data, lat, lon, elev, stn=1, multiyear = F, tag = F) {
# Tidy weather data
wth_data <- setNames(wth_data, tolower(colnames(wth_data)))
tidy_wth_oryza <- function(wth_data){
stopifnot(require(sirad))
stopifnot(class(wth_data$date)=="Date" & all(c("tmax", "tmin", "rain", "srad") %in%  var_names))
if("vp" %in% var_names){
message("Early morning vapor pressure (VP; kPa) in data")
} else if("rhum" %in% var_names)
{
wth_data <- mutate(wth_data,
es = sirad::es(tmax, tmin),         #Determination of mean saturation vapour pressure http://www.fao.org/3/x0490e/x0490e07.htm  - eq.12
vp = es*rhum/100) %>% select(-es)   #Determination of actual vapour pressure vpd http://www.fao.org/3/x0490e/x0490e07.htm  - eq.19
message("Early morning vapor pressure (VP; kPa) derived from relative humidity data")
} else {
wth_data <- mutate(wth_data, vp = NA_real_)
message("Vapor Pressure is not Available - VP Set as NA: -99")
}
if (!"wspd" %in% var_names) {
wth_data <- mutate(wth_data, wspd = NA_real_)
message("Wind Speed is not Available - Set as NA: -99")
}
return(wth_data)
}
print_tag <- function(){
cat("*-----------------------------------------------------------", sep = '\n')
cat(paste0("*  Station Name: ", id_name), sep = '\n')
cat(paste0("*  ORYZA Weather file - by https://github.com/jrodriguez88"), sep = '\n')
cat(paste0("*  Longitude: ", lon, " -- Latitude: ", lat, " -- Elevation: ", elev, "m"), sep = '\n')
cat("*-----------------------------------------------------------", sep = '\n')
cat(paste0("*  Date: ", min(wth_data$date), " : ", max(wth_data$date)), sep = '\n')
cat("*", sep = '\n')
cat("*  Column    Daily Value
*     1      Station number
*     2      Year
*     3      Day
*     4      irradiance         KJ m-2 d-1
*     5      min temperature            oC
*     6      max temperature            oC
*     7      vapor pressure            kPa
*     8      mean wind speed         m s-1
*     9      precipitation          mm d-1
*-----------------------------------------------------------", sep = '\n')
}
# Data base
data_to <- tidy_wth_oryza(wth_data) %>%
mutate(stn = stn,
year = year(date),
day = yday(date),
srad = if_else(is.na(srad), median(.$srad, na.rm = T), round(srad*1000, 2)),
tmax = if_else(is.na(tmax), -99, round(tmax, 2)),
tmin = if_else(is.na(tmin), -99, round(tmin, 2)),
rain = if_else(is.na(rain), -99, round(rain, 2)),
vp  = if_else(is.na(vp), -99, round(vp, 2)),
wspd = if_else(is.na(wspd), -99, round(wspd, 2))) %>%
dplyr::select(stn, year, day, srad, tmin, tmax, vp, wspd, rain)
#    dir.create(paste0(path,"/WTH"), showWarnings = FALSE)
set_head <- paste(lon, lat, elev, 0, 0, sep = ",")
if(isTRUE(multiyear)){
#DATA=read.table(file, head=T)
fname <- paste0(path, "/" , id_name, stn, ".cli")
sink(file = fname, append = F)
if(isTRUE(tag)) print_tag()
cat(set_head)
cat("\n")
write.table(data_to , sep= ",", row.names = F, col.names = F)
sink()
} else {
data_list <- split(data_to, data_to$year)
walk(data_list, function(x){
fname <- paste(path,"/", id_name, stn,".", str_sub(unique(x$year), 2), sep = "")
sink(file=fname)
if(isTRUE(tag)) print_tag()
cat(set_head)
cat("\n")
write.table(x ,sep=",",row.names=F,col.names=F)
sink()})
}
return(any(str_detect(list.files(path, id_name), id_name) == T))
}
write_wth_oryza(path = ".", id_name = "TEST2", wth_data = weather, lat = 3.8, lon = -76.5, elev = 650, multiyear = T, tag = T)
a = T
class(a)
weather
# Generate package documentation
document()
# Examine the contents of the man directory
dir("man")
# View the documentation for the data_summary function
help()
# View the documentation for the data_summary function
help("write_wth_oryza")
# View the documentation for the weather dataset
help("weather")
check()
check()
check()
use_package("dplyr")
use_package("lubridate")
use_package("purrr")
use_package("sirad")
check()
build()
use_mit_license()
library(available)
install.packages("available")
library(available)
available("agroclimR")
# Generate package documentation
document()
# Examine the contents of the man directory
dir("man")
check()
# Generate package documentation
document()
# Generate package documentation
document()
check()
devtools::install("agroclimR")
devtools::install(agroclimR)
devtools::install()
weather
soil
plant
write_wth_oryza(id_name = "test", wth_data = weather, lat = 3, lon = 75, elev = 500)
write_wth_oryza(id_name = "test", wth_data = weather, lat = 3, lon = 75, elev = 500)
write_wth_oryza
devtools::install_github("https://github.com/jrodriguez88/agroclimR")
devtools::install_github(repo = "https://github.com/jrodriguez88/agroclimR")
devtools::install_github("jrodriguez88/agroclimR")
load_all()
c("purrr", "dplyr", "data.table", "lubridate", "readxl", "naniar", "plotly",
"Hmisc", "soiltexture", "scales", "sirad", "parallel", "doFuture", "GA") %>%
map(use_package)
use_package("ggplot2")
use_package("tidyr")
use_package("stringr")
# Generate package documentation
document()
# Generate package documentation
document()
usethis::use_pkgdown()
pkgdown::build_site()
usethis::use_pkgdown_github_pages()
usethis::use_pkgdown_github_pages()
usethis::use_github_action("check-standard")
use_pkgdown_github_pages()
getwd()
library(devtools)
library(available)
library(roxygen2)
