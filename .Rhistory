library(sf)
install.packages("sf")
install.packages("terra")
install.packages("terra")
install.packages(c("bit", "broom", "bslib", "callr", "chron", "cli", "clue", "colorspace", "commonmark", "cpp11", "crayon", "curl", "data.table", "dbplyr", "digest", "doRNG", "dplyr", "DT", "dtplyr", "e1071", "evaluate", "fansi", "fontawesome", "forcats", "forecast", "fs", "gargle", "gdtools", "ggplot2", "ggrepel", "googlesheets4", "gower", "gtable", "haven", "highr", "Hmisc", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "isoband", "jsonlite", "knitr", "lubridate", "markdown", "modelr", "multcomp", "naniar", "openssl", "pbkrtest", "pillar", "plotly", "processx", "ps", "purrr", "raster", "Rcpp", "RcppArmadillo", "readr", "readxl", "reprex", "RJSONIO", "rlang", "rmarkdown", "rms", "rstudioapi", "rvest", "s2", "sass", "scales", "shiny", "sourcetools", "sp", "stringi", "stringr", "sys", "terra", "tidyr", "timeDate", "tinytex", "tseries", "units", "utf8", "vcd", "vctrs", "vdiffr", "viridisLite", "visdat", "vroom", "wk", "xfun", "yaml"))
install.packages(c("chron", "clue", "e1071", "fs", "ggrepel", "Hmisc", "lubridate", "RcppArmadillo", "readr", "readxl", "RJSONIO", "rms", "sourcetools", "tseries", "utf8", "xfun"))
index = 'SSTA_Nino34'
plot.nino = function(index = 'SSTA_Nino34')
{
noaa.df = read.fwf(file = url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
skip = 4, widths = c(12, 7,4, 9,4, 9,4, 9,4))
clabels = c('Data','SST_Nino12','SSTA_Nino12','SST_Nino3','SSTA_Nino3',
'SST_Nino34','SSTA_Nino34','SST_Nino4', 'SSTA_Nino4')
temp.title = 'SSTA Anomaly Trend\nWeekly Data centered on Wed'
colnames(noaa.df) = clabels
plot.title = switch(index,
'SSTA_Nino12' = paste('NINO 1.2', temp.title),
'SSTA_Nino3' = paste('NINO 3', temp.title),
'SSTA_Nino34' = paste('NINO 3.4', temp.title),
'SSTA_Nino4' = paste('NINO 4', temp.title))
serie.dates = seq(as.Date('1990-01-03'), by = 'week', length = nrow(noaa.df))
nino.rows = noaa.df[, index] > 0
nino = noaa.df[nino.rows, index]
nina = noaa.df[! nino.rows, index]
nino.df = data.frame(Date = serie.dates[nino.rows], nino)
nina.df = data.frame(Date = serie.dates[! nino.rows], nina)
require(ggplot2)
p = ggplot() +
geom_linerange(aes(x = Date, ymin = 0, ymax = nino), colour = I('red'), data = nino.df) +
geom_linerange(aes(x = Date, ymin = nina, ymax = 0), colour = I('blue'), data = nina.df) +
labs(x = '', y = expression(paste("SST Anomaly [", degree, "C]", sep = "")), title = plot.title) +
theme(plot.title = element_text(face = "bold", size = 15))
return(p)
}
plot.nino()
install.packages(c("acepack", "AICcmodavg", "askpass", "bslib", "Cairo", "checkmate", "classInt", "covr", "cpp11", "credentials", "crosstalk", "curl", "cyclocomp", "data.table", "dbplyr", "deldir", "DEoptimR", "digest", "dplyr", "DT", "e1071", "emmeans", "evaluate", "FactoMineR", "fansi", "fontawesome", "forecast", "fs", "gargle", "gert", "GGally", "ggcorrplot", "ggplot2", "ggrepel", "ggthemes", "glmnet", "gtable", "haven", "Hmisc", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "httr", "httr2", "hunspell", "interp", "jsonlite", "knitr", "labeling", "languageserver", "later", "lifecycle", "lintr", "listviewer", "lme4", "lubridate", "maps", "markdown", "MatrixModels", "minqa", "mvtnorm", "openssl", "ordinal", "pan", "pcaPP", "pkgload", "plotly", "plyr", "polspline", "prettyunits", "processx", "progress", "promises", "purrr", "qreport", "quantmod", "quantreg", "R.utils", "ragg", "ranger", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "readxl", "rematch", "remotes", "reticulate", "rio", "rlang", "rmarkdown", "rms", "robustbase", "rprojroot", "rsoi", "rstudioapi", "rsvg", "sass", "scales", "seriation", "sf", "shiny", "sp", "stringi", "stringr", "styler", "svglite", "systemfonts", "terra", "testthat", "textshaping", "tinytex", "TMB", "tseries", "TTR", "units", "utf8", "uuid", "vctrs", "vdiffr", "VGAM", "viridis", "vroom", "waldo", "withr", "wk", "xfun", "xml2"))
install.packages(c("acepack", "AICcmodavg", "askpass", "bslib", "Cairo", "checkmate", "classInt", "covr", "cpp11", "credentials", "crosstalk", "curl", "cyclocomp", "data.table", "dbplyr", "deldir", "DEoptimR", "digest", "dplyr", "DT", "e1071", "emmeans", "evaluate", "FactoMineR", "fansi", "fontawesome", "forecast", "fs", "gargle", "gert", "GGally", "ggcorrplot", "ggplot2", "ggrepel", "ggthemes", "glmnet", "gtable", "haven", "Hmisc", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "httr", "httr2", "hunspell", "interp", "jsonlite", "knitr", "labeling", "languageserver", "later", "lifecycle", "lintr", "listviewer", "lme4", "lubridate", "maps", "markdown", "MatrixModels", "minqa", "mvtnorm", "openssl", "ordinal", "pan", "pcaPP", "pkgload", "plotly", "plyr", "polspline", "prettyunits", "processx", "progress", "promises", "purrr", "qreport", "quantmod", "quantreg", "R.utils", "ragg", "ranger", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "readxl", "rematch", "remotes", "reticulate", "rio", "rlang", "rmarkdown", "rms", "robustbase", "rprojroot", "rsoi", "rstudioapi", "rsvg", "sass", "scales", "seriation", "sf", "shiny", "sp", "stringi", "stringr", "styler", "svglite", "systemfonts", "terra", "testthat", "textshaping", "tinytex", "TMB", "tseries", "TTR", "units", "utf8", "uuid", "vctrs", "vdiffr", "VGAM", "viridis", "vroom", "waldo", "withr", "wk", "xfun", "xml2"))
install.packages(c("acepack", "AICcmodavg", "askpass", "bslib", "Cairo", "checkmate", "classInt", "covr", "cpp11", "credentials", "crosstalk", "curl", "cyclocomp", "data.table", "dbplyr", "deldir", "DEoptimR", "digest", "dplyr", "DT", "e1071", "emmeans", "evaluate", "FactoMineR", "fansi", "fontawesome", "forecast", "fs", "gargle", "gert", "GGally", "ggcorrplot", "ggplot2", "ggrepel", "ggthemes", "glmnet", "gtable", "haven", "Hmisc", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "httr", "httr2", "hunspell", "interp", "jsonlite", "knitr", "labeling", "languageserver", "later", "lifecycle", "lintr", "listviewer", "lme4", "lubridate", "maps", "markdown", "MatrixModels", "minqa", "mvtnorm", "openssl", "ordinal", "pan", "pcaPP", "pkgload", "plotly", "plyr", "polspline", "prettyunits", "processx", "progress", "promises", "purrr", "qreport", "quantmod", "quantreg", "R.utils", "ragg", "ranger", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "readxl", "rematch", "remotes", "reticulate", "rio", "rlang", "rmarkdown", "rms", "robustbase", "rprojroot", "rsoi", "rstudioapi", "rsvg", "sass", "scales", "seriation", "sf", "shiny", "sp", "stringi", "stringr", "styler", "svglite", "systemfonts", "terra", "testthat", "textshaping", "tinytex", "TMB", "tseries", "TTR", "units", "utf8", "uuid", "vctrs", "vdiffr", "VGAM", "viridis", "vroom", "waldo", "withr", "wk", "xfun", "xml2"))
R
r
info()
version()
library(tidyverse)
ip = as.data.frame(installed.packages()[,c(1,3:4)])
ip = ip[is.na(ip$Priority),1:2,drop=FALSE]
ip
library(tidyverse)
install.packages(c("curl", "data.table", "fansi", "pcaPP", "rlang", "svglite", "vctrs"))
setwd("D:\DEVELOPER")
setwd("D:/00_DEVELOPER")
list.files()
library(devtools)
# Use the create function to set up your first package
create("agroclimR")
# Take a look at the files and folders in your package
dir("agroclimR")
# Use the dump() function to write the numeric_summary function
dump("tidy_wth_oryza", file = "agroclimR/R/tidy_wth_oryza.R")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/utils/utils_crop_model.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/utils/soil_PTF.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/utils/eval_models.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/utils/clim_tools.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/write_files/write_exp_oryza.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/write_files/write_soil_oryza.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/write_files/write_wth_oryza.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/write_files/write_crop_oryza.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/run_tools/extract_drates_param.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/run_tools/run_drates_param.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/run_tools/run_cropmodel.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/param_models/get_params_oryza.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/graphics/param_oryza_graphics.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/graphics/INPUT_data_graphics.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/calibration/calibration_oryza_GA.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/read_outputs/read_outputs_oryza.R", encoding = "UTF-8")
source("D:/00_DEVELOPER/jre_thesis_un/dssat.R")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/utils/utils_crop_model.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/utils/soil_PTF.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/utils/eval_models.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/utils/clim_tools.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/write_files/write_exp_oryza.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/write_files/write_soil_oryza.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/write_files/write_wth_oryza.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/write_files/write_crop_oryza.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/run_tools/extract_drates_param.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/run_tools/run_drates_param.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/run_tools/run_cropmodel.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/param_models/get_params_oryza.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/graphics/param_oryza_graphics.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/graphics/INPUT_data_graphics.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/calibration/calibration_oryza_GA.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/read_outputs/read_outputs_oryza.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/utils/utils_crop_model.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/utils/eval_models.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/utils/clim_tools.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/utils/soil_PTF.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/write_files/write_exp_aquacrop.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/write_files/write_soil_aquacrop.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/write_files/write_wth_aquacrop.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/write_files/write_crop_aquacrop.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/run_tools/run_cropmodel.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/param_models/get_params_aquacrop.R", encoding = "UTF-8")
#source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/graphics/param_oryza_graphics.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/graphics/INPUT_data_graphics.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/calibration/calibration_aquacrop_GA.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/read_outputs/read_outputs_aquacrop.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/utils/utils_crop_model.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/utils/eval_models.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/utils/clim_tools.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/utils/soil_PTF.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/write_files/write_exp_dssat.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/write_files/write_soil_dssat.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/write_files/write_wth_dssat.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/write_files/write_crop_dssat.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/run_tools/run_cropmodel.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/param_models/get_params_dssat.R", encoding = "UTF-8")
#source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/graphics/param_oryza_graphics.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/graphics/INPUT_data_graphics.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/calibration/calibration_dssat_GA.R", encoding = "UTF-8")
source("https://raw.githubusercontent.com/jrodriguez88/agroclimR/master/R_package/read_outputs/read_outputs_dssat.R", encoding = "UTF-8")
## Carga instala paquetes
inpack(c("tidyverse", "data.table", "lubridate", "readxl", "naniar", "plotly",
"Hmisc", "soiltexture", "scales", "sirad", "parallel", "doFuture", "GA", "tictoc"))
library(devtools)
# Take a look at the files and folders in your package
dir("agroclimR")
# Use the dump() function to write the numeric_summary function
dump("tidy_wth_oryza", file = "agroclimR/R/tidy_wth_oryza.R")
# Verify that the file is in the correct directory
dir("agroclimR/R")
inpack()
inpack
installed.packages()[, "Package"]
lsf.str()
lsf.str()
X <- lsf.str()
as.vector(X)
rm(X)
as.vector(lsf.str())
as.vector(X)
# Verify that the file is in the correct directory
dir("agroclimR/R")
# Verify that the file is in the correct directory
dir("agroclimR/R")
as.vector(lsf.str()) %>% map(~dump(.x, file = paste0("agroclimR/R/", .x, ".R")))
# Verify that the file is in the correct directory
dir("agroclimR/R")
# What is in the package at the moment?
dir("agroclimR")
inpack(c("tidyverse", "data.table", "lubridate", "readxl", "naniar", "plotly",
"Hmisc", "soiltexture", "scales", "sirad", "parallel", "doFuture", "GA", "tictoc"))
# Arguments
path_data <- "_data/DATA_FINAL/"
cultivar = "F2000"
files <- list.files(path_data, pattern = fixed(cultivar)) %>% str_subset("~", negate = T)
# Test data
test_data <- import_exp_data(path_data, files, cultivar)
# Arguments
path_data <- "tesis_jre/_data"
cultivar = "F2000"
files <- list.files(path_data, pattern = fixed(cultivar)) %>% str_subset("~", negate = T)
files
# Arguments
path_data <- "jre_thesis_un/_data/DATA_FINAL/"
cultivar = "F2000"
files <- list.files(path_data, pattern = fixed(cultivar)) %>% str_subset("~", negate = T)
files
files
# Test data
test_data <- import_exp_data(path_data, files, cultivar)
input_data <- test_data$data$input_data
input_data
input_data[[1]]
test_data
data <- input_data[[3]]
# What is in the package at the moment?
dir("agroclimR")
data
use_data(data, pkg = "agroclimR", overwrite = TRUE)
proj_get()
###
# What is in the package at the moment?
dir("agroclimR")
use_data(data, pkg = "agroclimR", overwrite = TRUE)
library(devtools)
use_data(data, pkg = "agroclimR", overwrite = TRUE)
setwd("D:/00_DEVELOPER/agroclimR/")
###
# What is in the package at the moment?
dir("agroclimR")
###
# What is in the package at the moment?
dir("")
###
# What is in the package at the moment?
dir()
use_data(data, pkg = "agroclimR", overwrite = TRUE)
###
# What is in the package at the moment?
dir()
data
test_data
data$WTH_obs
weather <- data$WTH_obs %>% mutate(DATE = as.Date(DATE))
weather
use_data(weather, pkg = "agroclimR", overwrite = TRUE)
input_data[[3]]
data <- input_data[[3]]
weather <- data$WTH_obs %>% mutate(DATE = as.Date(DATE))
use_data(weather, pkg = "agroclimR", overwrite = TRUE)
use_data(weather, pkg = "", overwrite = TRUE)
weather
use_data(weather, pkg = "agroclimR", overwrite = TRUE)
usethis::use_data(weather, pkg = "agroclimR", overwrite = TRUE)
usethis::use_data(weather, overwrite = TRUE)
###
# What is in the package at the moment?
dir()
data$SOIL_obs
soil <- data$SOIL_obs %>% mutate(SAMPLING_DATE = as.Date(SAMPLING_DATE))
soil
